generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}



model Category {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  products    Product[]   @relation("CategoryToProduct")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  categoryId  String    @db.ObjectId // Foreign Key to Category
  category    Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Int
  priceBig    Int   @default(0)
  images      Image[]   // Relation to Image model
  orderItems  OrderItem[]   // Relation to Order model
  description String    @default("")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  @@index([categoryId])
}

model Volume {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  volume    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean   @default(false)
  quantity   Int    @default(0)
  volume     Int    @default(30)
  phone      String    @default("")
  address    String    @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId// Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}


model Color {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String   // Foreign Key to Store
  name        String
  value       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}

model Image {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId// Foreign Key to Product
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String   // URL of the image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
}

model Contact {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  nomComplet  String
  societe     String
  shoisir     String   @default("")
  email       String
  phone       String    @default("")
  message     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Partner {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  nomComplet  String
  societe     String
  email       String
  phone       String    @default("")
  message     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// model ProductDescription {
//   id         String   @id @default(auto()) @map("_id") 
//   content    String
//   productId  String
//   product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

//   @@index([productId])
// }